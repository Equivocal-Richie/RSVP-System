
"use client";

import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Mail, Info, Sparkles, RefreshCw } from 'lucide-react';
import type { CreateEventFormData } from './CreateEventWizard'; // Assuming this exports the full form data type
import { generateInvitationText } from '../actions'; // Placeholder for actual AI call
import type { GuestInput } from '@/types';

interface PreviewSendStepProps {
  eventData: Partial<CreateEventFormData>; // Or a more specific type for event details part
  guestList: GuestInput[];
}

export function PreviewSendStep({ eventData, guestList }: PreviewSendStepProps) {
  const [sampleEmail, setSampleEmail] = useState<string | null>(null);
  const [isLoadingPreview, setIsLoadingPreview] = useState(false);
  const [previewError, setPreviewError] = useState<string | null>(null);

  const firstGuest = guestList?.[0];

  const fetchSampleEmail = async () => {
    if (!firstGuest || !eventData.name || !eventData.description || !eventData.mood) {
      setPreviewError("Not enough event or guest data to generate a preview.");
      return;
    }
    setIsLoadingPreview(true);
    setPreviewError(null);
    try {
      // In a real app, this would be an AI call.
      // For now, we simulate with a placeholder or call a stubbed server action.
      const result = await generateInvitationText({
        eventName: eventData.name,
        eventDescription: eventData.description,
        eventMood: eventData.mood as any, // Cast if types don't align perfectly initially
        guestName: firstGuest.name,
      });

      if (result.success && result.emailText) {
        setSampleEmail(result.emailText);
      } else {
        setPreviewError(result.message || "Failed to generate email preview.");
      }
    } catch (error) {
      console.error("Error generating email preview:", error);
      setPreviewError("An unexpected error occurred while generating the preview.");
    } finally {
      setIsLoadingPreview(false);
    }
  };

  useEffect(() => {
    fetchSampleEmail();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Fetch on initial mount of this step

  const eventDate = eventData.date ? new Date(eventData.date).toLocaleDateString() : 'N/A';
  const eventTime = eventData.time || 'N/A';
  const eventLocation = eventData.location || 'N/A';

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Review Invitation Details</AlertTitle>
        <AlertDescription>
          You're about to create the event and queue invitations for <strong>{guestList.length}</strong> guest(s).
          Below is a sample of the invitation email content generated by AI for the first guest.
        </AlertDescription>
      </Alert>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center"><Mail className="mr-2 h-5 w-5 text-primary" />Sample Invitation Email</CardTitle>
          <CardDescription>
            For: {firstGuest?.name || 'Sample Guest'} ({firstGuest?.email || 'guest@example.com'})
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="p-4 border rounded-md bg-muted/30 min-h-[200px] whitespace-pre-wrap text-sm">
            {isLoadingPreview && <p className="text-muted-foreground">Generating preview...</p>}
            {previewError && <p className="text-destructive">{previewError}</p>}
            {sampleEmail && !isLoadingPreview && !previewError && (
              <>
                <p>Subject: You're Invited to {eventData.name || 'Our Event'}!</p>
                <hr className="my-2"/>
                {sampleEmail}
                <hr className="my-2"/>
                <p><strong>Event Details:</strong></p>
                <p><strong>What:</strong> {eventData.name || 'Our Event'}</p>
                <p><strong>When:</strong> {eventDate} at {eventTime}</p>
                <p><strong>Where:</strong> {eventLocation}</p>
                <p className="mt-2">To RSVP, please click on your unique link: [Unique RSVP Link Will Be Here]</p>
                <p>We look forward to seeing you!</p>
              </>
            )}
             {!sampleEmail && !isLoadingPreview && !previewError && !firstGuest && (
                <p className="text-muted-foreground">Add guests in the previous step to see a preview.</p>
             )}
          </div>
          <div className="flex gap-2">
            <Button type="button" variant="outline" onClick={fetchSampleEmail} disabled={isLoadingPreview || !firstGuest}>
              <RefreshCw className={`mr-2 h-4 w-4 ${isLoadingPreview ? 'animate-spin' : ''}`} />
              Regenerate Preview
            </Button>
            {/* Placeholder for more advanced AI adjustment */}
            <Button type="button" variant="outline" disabled>
              <Sparkles className="mr-2 h-4 w-4" /> Adjust with AI (Coming Soon)
            </Button>
          </div>
        </CardContent>
      </Card>
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Important Note</AlertTitle>
        <AlertDescription>
          Clicking "Create Event & Send Invitations" will finalize the event details, create unique RSVP links for all guests, and add them to the database.
          The actual sending of emails will be handled by a backend process (e.g., queued tasks). Unique invitation links will be of the format: <code>https://your-app-domain/rsvp/unique-token</code>.
        </AlertDescription>
      </Alert>
    </div>
  );
}
